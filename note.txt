Lets study about pipes and filters. 
    Behind the scenes there are lot of processes in our cpu. So how they communicate with each other?
    And most of all why they need to communicate ? Lets say process1 is using some resources for which process 
    is waiting to acquires that resources. So how the process2 will know that process one is done with 
    the resources and its free now. That is where Pipes come in to play. Pipes are used for interprocess
    commnication. And its of following types: 
        1) Anonymous: 
            -Temporary, unidirectional commnication. 
            -Typically used between parent and child process. 
            -Can not be used between unrelated process. 

        2)Names Pipes: 
            - Persistent, bidirectional commnication. 
            - commnication between unrelated process. 
            - Named pipes appear as file in the directory. 


Lets get about how interprocess communication occurs in our operating system. This can be achieved by implementing 
following ways. 
        So there are different virtual pages for different process and  there comes our physical memory frame. 
        If there is two processes and want to communicate with each other, virtual page of each process will map to 
        the common physicalf frame just say (100) in this case. Then now they share the same physical frame and its comes
        with another properties for data privacy. Say one process and read and write both but other one is having only read
        permission. 

|-----------------------------|----------------------------|----------------------------|
|10 bit (first level index)   | 10 bit (second level index)|    12 bits(offset)         |
|_____________________________|____________________________|____________________________|

First level index:
    Think of it as the "section" of a library
        Second level index:
            This as the shelf within that section. 
                Offset: the "page number" of the book we are looking for on that shelf. 



<<<<<<<<<<<<<<<<<<<<------------------------------Concept for Concat----------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1) Pipes and interprocess commnication:
    - We will use pipe for the commnication between two processes. 
    - pipe() => system call
    - dup2() => to redirect the data between the processes

2) forking process: 
        - Each process can process its task independently. 

3)Redirection of standard I/O. 
    Each process has I/O operation. That can be contolled using the filde descriptor and dup2() function. 

4)Executing Commands:  
    For this taks we use exec() family. 
            - execlp()
            - execvp()

5)Managaing file descriptor:
    - After forking close the unused end of the pipes to prevent resources leaks or unexpected behaviour.
    - Close the appropriate descriptor in both parent and child processes.

6)File permission: 
    - When writting to a file we use creat() and open(), we need to give certain permission flags, like read only and read and write both.

7) Programm structure and abstraction: 
    - set_outputfile() : we need to define a path for the path. 
    - create_child(): start a child process. 

8) Handling EOF: 
    When all the data in the pipe has been read and write then end of the file is closed. 
